# A type that starts with "-" is an optional type, otherwise it can't be null
currentVersion: "0.0.0"
interfacesData:
  ClientBoundRequest:
    extendInterfaces: [RPCEvent]
  ClientBoundResponse:
    extendInterfaces: [RPCEvent]
  ServerBoundRequest:
    extendInterfaces: [RPCEvent]
  ServerBoundResponse:
    extendInterfaces: [RPCEvent]
superTypesData:
  RPCEvent: [
    Empty,
    Binary,
    BinaryOptional,
    SingletonUpdateOldData,
    GeneratedEntityId,
    GetDatabase,
    Disconnect,
    GetSingleton,
    SingletonGet,
    SingletonSet,
    SingletonUpdateInit,
    SingletonUpdateEnd,
    RPCCrash,
    CloseDatabase
  ]
  ServerBoundRequest: [
    GetDatabase,
    Disconnect,
    GetSingleton,
    SingletonGet,
    SingletonSet,
    SingletonUpdateInit,
    CloseDatabase
  ]
  ClientBoundResponse: [
    Empty,
    GeneratedEntityId,
    Binary,
    BinaryOptional,
    RPCCrash
  ]
  ClientBoundRequest: [
    SingletonUpdateOldData
  ]
  ServerBoundResponse: [
    Empty,
    SingletonUpdateEnd
  ]
  Filter: [
    NoFilter,
    BloomFilter
  ]
customTypesData:
  Path:
    javaClass: java.nio.file.Path
    serializer: it.cavallium.dbengine.database.remote.PathSerializer
  Compression:
    javaClass: it.cavallium.dbengine.client.Compression
    serializer: it.cavallium.dbengine.database.remote.CompressionSerializer
  Duration:
    javaClass: java.time.Duration
    serializer: it.cavallium.dbengine.database.remote.DurationSerializer
  RocksDB:
    javaClass: org.rocksdb.RocksDB
    serializer: it.cavallium.dbengine.database.remote.RocksDBSerializer
  ColumnFamilyHandle:
    javaClass: org.rocksdb.ColumnFamilyHandle
    serializer: it.cavallium.dbengine.database.remote.ColumnFamilyHandleSerializer
  UpdateReturnMode:
    javaClass: it.cavallium.dbengine.database.UpdateReturnMode
    serializer: it.cavallium.dbengine.database.remote.UpdateReturnModeSerializer
  LLSnapshot:
    javaClass: it.cavallium.dbengine.database.LLSnapshot
    serializer: it.cavallium.dbengine.database.remote.LLSnapshotSerializer

  Bytes:
    javaClass: it.cavallium.buffer.Buf
    serializer: it.cavallium.dbengine.database.remote.BufSerializer
  StringMap:
    javaClass: java.util.Map<java.lang.String, java.lang.String>
    serializer: it.cavallium.dbengine.database.remote.StringMapSerializer
  String2ColumnFamilyHandleMap:
    javaClass: java.util.Map<java.lang.String, org.rocksdb.ColumnFamilyHandle>
    serializer: it.cavallium.dbengine.database.remote.String2ColumnFamilyHandleMapSerializer
baseTypesData:
  BoxedRPCEvent:
    data:
      val: RPCEvent

  # Server-bound requests

  GetDatabase:
    data:
      name: String
      columns: Column[]
      databaseOptions: DatabaseOptions
  Disconnect: { data: { } }
  GetSingleton:
    data:
      databaseId: long
      singletonListColumnName: byte[]
      name: byte[]
      defaultValue: -Bytes
  SingletonGet:
    data:
      singletonId: long
      snapshot: -LLSnapshot
  SingletonSet:
    data:
      singletonId: long
      value: -Bytes
  SingletonUpdateInit:
    data:
      singletonId: long
      updateReturnMode: UpdateReturnMode
  SingletonUpdateEnd:
    data:
      exist: boolean
      value: byte[]
  CloseDatabase:
    data:
      databaseId: long

  # Client-bound responses

  GeneratedEntityId:
    data:
      id: long
  RPCCrash:
    data:
      code: int
      message: -String

  # Client-bound requests

  SingletonUpdateOldData:
    data:
      exist: boolean
      oldValue: byte[]

  # Server-bound responses


  # Data

  BinaryOptional:
    data:
      val: -Binary
  Binary:
    data:
      val: byte[]
  Empty: { data: { } }
  Column:
    data:
      name: String
  DatabaseOptions:
    data:
      volumes: DatabaseVolume[]
      extraFlags: StringMap
      absoluteConsistency: boolean
      lowMemory: boolean
      useDirectIO: boolean
      allowMemoryMapping: boolean
      optimistic: boolean
      maxOpenFiles: -int
      blockCache: -long
      persistentCaches: PersistentCache[]
      writeBufferManager: -long
      spinning: boolean
      defaultColumnOptions: ColumnOptions
      columnOptions: NamedColumnOptions[]
      logPath: -String
      walPath: -String
      openAsSecondary: boolean
      secondaryDirectoryName: -String
  ColumnOptions:
    data:
      levels: DatabaseLevel[]
      memtableMemoryBudgetBytes: -long
      cacheIndexAndFilterBlocks: -boolean
      partitionFilters: -boolean
      filter: -Filter
      blockSize: -int
      persistentCacheId: -String
      writeBufferSize: -long
      blobFiles: boolean
      minBlobSize: -long
      blobFileSize: -long
      blobCompressionType: -Compression
  NamedColumnOptions:
    data:
      name: String
      options: ColumnOptions
  NoFilter:
    data: {}
  BloomFilter:
    data:
      bitsPerKey: int
      optimizeForHits: -boolean
  PersistentCache:
    data:
      id: String
      path: String
      size: long
      optimizeForNvm: boolean
  DatabaseVolume:
    data:
      volumePath: Path
      targetSizeBytes: long
  DatabaseLevel:
    data:
      maxDictBytes: int
      compression: Compression
versions:
  0.0.0:
    details:
      changelog: "First version"
